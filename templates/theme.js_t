{# vim: set ft=javascript: #}

var __theme__ = {{ theme|tojson }};
var __themes__ = {{ themes.keys()|list|sort|tojson }};
var __themeSelected__ = false;

var themeLink = document.querySelector('.theme');
var faviconLink = document.querySelector('link[rel="icon"]');

function getThemeURL(theme) {
  return '/style-' + theme + '.css';
}

function parseThemeURL(url) {
  return /style-(.+)\.css$/.exec(url)[1];
}

function isThemeLoaded() {
  var css;

  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode.className === 'theme') {
      css = document.styleSheets[i];
      break;
    }
  }

  return css && (__theme__ == parseThemeURL(css.href)) && css.cssRules;
}

function guessTheme() {
  var regex = /[?&#]theme=([^&#]+)/;
  var hash = location.hash;
  var href = location.href;
  var theme = (regex.exec(hash) || regex.exec(href) || [])[1];
  if (theme) {
    return theme;
  }
  var date = new Date();
  var eventKey = (date.getMonth() + 1) + '/' + date.getDate();
  var events = {{ events|tojson }};
  theme = events[eventKey];
  return theme || {{ theme|tojson }};
}

function generateFavicon(shape, colors) {
  var favicon = document.createElement('canvas');
  favicon.width = 16;
  favicon.height = 16;
  var ctx = favicon.getContext('2d');

  var shapeFlags = {'☰': [0,0,0], '☱': [1,0,0], '☲': [0,1,0],
                    '☳': [1,1,0], '☴': [0,0,1], '☵': [1,0,1],
                    '☶': [0,1,1], '☷': [1,1,1]}[shape];

  for (var i = 0; i < 3; ++i) {
    var split = shapeFlags[i] === 1;
    var left = 1 + i * 5;

    if (split) {
      ctx.fillStyle = colors[i + 1] || colors[0];
      ctx.fillRect(left, 1, 4, 7);

      ctx.fillStyle = colors[i + 4] || colors[0];
      ctx.fillRect(left, 9, 4, 6);
    } else {
      ctx.fillStyle = colors[i + 1] || colors[0];
      ctx.fillRect(left, 1, 4, 14);
    }
  }

  return favicon;
}

function updateFavicon() {
  try {
    if (!isThemeLoaded()) {
      throw 'retry';
    }

    var emblem;
    switch (__theme__) {
    {% for theme, style in themes.items() %}
      case {{ theme|tojson }}:
        emblem = {{ style['emblem']|tojson }}
        break;
    {% endfor %}
    }

    var favicon = generateFavicon(emblem.shape, emblem.colors);
    faviconLink.href = favicon.toDataURL('image/icon');
  } catch (err) {
    if (err == 'retry') {
      setTimeout(arguments.callee, 100);
    } else {
      throw err;
    }
  }
}

function keepThemeOnLinks() {
  var $anchors = document.querySelectorAll('a[href]');

  if ($anchors.length === 0) {
    window.addEventListener('load', arguments.callee);
  }

  for (var i = 0; i < $anchors.length; ++i) {
    var $a = $anchors[i];
    var href = $a.getAttribute('href');

    if (!/^\//.exec(href)) {
      // Skip external links.
      continue;
    } else if (/^\/runker\/?/.exec(href)) {
      // Skip SUBLEERUNKER.
      continue;
    }

    // Remove existing theme in querystring and hash.
    href = href.replace(/([?&#])theme=[^&]+/, '');
    href = href.replace('&', '?');

    // Keep querystring and hash.
    var hash = /#.+/.exec(href) || '';
    href = href.replace(/#.+/, '');

    // Add the current theme into querystring.
    if (/\?/.exec(href)) {
      href += '&';
    } else {
      href += '?';
    }
    href += 'theme=' + __theme__;

    // Restore hash.
    href += hash;

    $a.setAttribute('href', href);
  }
}

function selectTheme(theme) {
  __theme__ = theme;
  __themeSelected__ = true;

  updateFavicon();
  keepThemeOnLinks();

  themeLink.setAttribute('href', getThemeURL(theme));
}

function selectGuessedTheme() {
  var theme = guessTheme();
  if (theme != __theme__) {
    selectTheme(theme);
  }
  return theme;
}

// Select the initial theme.
selectGuessedTheme();

// Load jQuery and init instant theme selection when the hash changed.
window.addEventListener('hashchange', function() {
  window.removeEventListener('hashchange', arguments.callee);

  var done = false;
  var jQueryScript = document.createElement('script');
  jQueryScript.src = 'https://code.jquery.com/jquery-3.4.1.min.js';

  jQueryScript.onload = jQueryScript.onreadystatechange = function() {
    if (done) {
      return;
    }
    if (this.readyState && !/loaded|complete/.exec(this.readyState)) {
      return;
    }

    done = true;
    this.onload = this.onreadystatechange = null;

    initThemeSelection();
    selectGuessedTheme();
  };

  document.head.appendChild(jQueryScript);
  document.body.setAttribute('class', 'loading');
});

function initThemeSelection() {
  var $body = $(document.body);
  var $themeStyle = $('<style>').appendTo(document.head);

  // Override selectTheme() to re-draw the page.
  selectTheme = function(theme) {
    __theme__ = theme;

    updateFavicon();
    keepThemeOnLinks();

    $body.addClass('loading');
    isThemeLoaded = function() { return false; };

    $.get(getThemeURL(theme), function(css) {
      // <link> for theme is not required.
      $(themeLink).remove();

      // Apply the CSS as <style>.
      $themeStyle.text(css);

      // Re-draw the page after loading Web fonts.
      function redraw() {
        setTimeout(function() {
          $body.removeClass('loading');
        }, 100);
        isThemeLoaded = function() { return true; };
      }

      if (document.fonts === undefined) {
        setTimeout(redraw, 10);
      } else {
        document.fonts.ready.then(redraw);
      }

    });
  }

  window.addEventListener('hashchange', selectGuessedTheme);
}

// Traverse themes with 'j' and 'k'.
window.addEventListener('keypress', function(e) {
  var i = __themes__.indexOf(__theme__);
  var theme = __theme__;

  if (e.keyCode === 106) {         // 'j'
    theme = __themes__[(__themes__.length + i + 1) % __themes__.length];
  } else if (e.keyCode === 107) {  // 'k'
    theme = __themes__[(__themes__.length + i - 1) % __themes__.length];
  } else {
    return;
  }

  if (/\?/.exec(location.href)) {
    location.href = location.href.replace(/[\?#].+$/, '') + '#theme=' + theme;
  } else {
    location.hash = '#theme=' + theme;
  }
});
