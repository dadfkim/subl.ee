{# vim: set ft=javascript: #}

var __theme__ = {{ theme|tojson }};
var __themes__ = {{ themes.keys()|list|sort|tojson }};

// -----------------------------------------------------------------------------
// Theme URL
// -----------------------------------------------------------------------------

function getThemeURL(theme) {
  return '/theme:' + theme + '.css';
}

function parseThemeURL(url) {
  return /theme:(.+)\.css$/.exec(url)[1];
}

function guessTheme() {
  var regex = /[?&#]theme=([^&#]+)/;
  var hash = location.hash;
  var href = location.href;
  var theme = (regex.exec(hash) || regex.exec(href) || [])[1];
  if (theme) {
    return theme;
  }
  var date = new Date();
  var eventKey = (date.getMonth() + 1) + '/' + date.getDate();
  var events = {{ events|tojson }};
  theme = events[eventKey];
  return theme || {{ theme|tojson }};
}

// -----------------------------------------------------------------------------
// Favicon
// -----------------------------------------------------------------------------

function generateFavicon(shape, colors) {
  var favicon = document.createElement('canvas');
  favicon.width = 16;
  favicon.height = 16;
  var ctx = favicon.getContext('2d');

  var shapeFlags = {'☰': [0,0,0], '☱': [1,0,0], '☲': [0,1,0],
                    '☳': [1,1,0], '☴': [0,0,1], '☵': [1,0,1],
                    '☶': [0,1,1], '☷': [1,1,1]}[shape];

  for (var i = 0; i < 3; ++i) {
    var split = shapeFlags[i] === 1;
    var left = 1 + i * 5;

    if (split) {
      ctx.fillStyle = colors[i + 1] || colors[0];
      ctx.fillRect(left, 1, 4, 7);

      ctx.fillStyle = colors[i + 4] || colors[0];
      ctx.fillRect(left, 9, 4, 6);
    } else {
      ctx.fillStyle = colors[i + 1] || colors[0];
      ctx.fillRect(left, 1, 4, 14);
    }
  }

  return favicon;
}

function updateFavicon() {
  var emblem;
  switch (__theme__) {
  {% for theme, style in themes.items() %}
    case {{ theme|tojson }}:
      emblem = {{ style['emblem']|tojson }}
      break;
  {% endfor %}
  }

  var favicon = generateFavicon(emblem.shape, emblem.colors);

  var faviconLink = document.querySelector('link[rel="icon"]');
  faviconLink.href = favicon.toDataURL('image/icon');
}

// -----------------------------------------------------------------------------
// Add ?theme= to internal links.
// -----------------------------------------------------------------------------

function keepThemeOnLinks() {
  var $anchors = document.querySelectorAll('a[href]');

  if ($anchors.length === 0) {
    addEventListener('load', keepThemeOnLinks);
  }

  for (var i = 0; i < $anchors.length; ++i) {
    var $a = $anchors[i];
    var href = $a.getAttribute('href');

    if (!/^\//.exec(href)) {
      // Skip external links.
      continue;
    } else if (/^\/runker\/?/.exec(href)) {
      // Skip SUBLEERUNKER.
      continue;
    }

    // Remove existing theme in querystring and hash.
    href = href.replace(/([?&#])theme=[^&]+/, '');
    href = href.replace('&', '?');

    // Keep querystring and hash.
    var hash = /#.+/.exec(href) || '';
    href = href.replace(/#.+/, '');

    // Add the current theme into querystring.
    if (/\?/.exec(href)) {
      href += '&';
    } else {
      href += '?';
    }
    href += 'theme=' + __theme__;

    // Restore hash.
    href += hash;

    $a.setAttribute('href', href);
  }
}

// -----------------------------------------------------------------------------
// Static Theme Loading
// -----------------------------------------------------------------------------

var themeSelected = false;
function selectTheme(theme) {
  __theme__ = theme;

  updateFavicon();
  keepThemeOnLinks();

  if (!themeSelected) {
    // Load theme statically at the first time.
    themeSelected = true;

    // <link class="theme" />
    var themeLink = document.querySelector('.theme');

    themeLink.setAttribute('href', getThemeURL(theme));
    return;
  }

  loadThemeDynamically(theme);
}

function selectGuessedTheme() {
  var theme = guessTheme();
  if (theme !== __theme__) {
    selectTheme(theme);
  }
  return theme;
}

// Select the initial theme.
selectGuessedTheme();

// -----------------------------------------------------------------------------
// Dynamic Theme Loading
// -----------------------------------------------------------------------------

window.addEventListener('hashchange', selectGuessedTheme);

var lock = false;
function loadThemeDynamically(theme) {
  if (lock) {
    return;
  }
  lock = true;

  var $body = document.body;
  var $footer = document.querySelector('footer');
  var $link = document.querySelector('link.theme');

  // 1. Start to hide contents.
  $body.classList.add('loading');
  $body.addEventListener('transitionend', function onHidden(e) {
    if (getComputedStyle($footer).opacity !== '0') {
      return;
    }
    $body.removeEventListener('transitionend', onHidden);

    // 2. Load CSS when contents are hidden.
    $loader = $link.cloneNode();
    $loader.setAttribute('href', getThemeURL(theme));
    document.head.appendChild($loader);

    var timedOut = false;
    setTimeout(function() { timedOut = true; }, 5000);

    setTimeout(function onRendered() {
      if (!timedOut) {
        var $detect = document.createElement('div');
        $detect.setAttribute('data-detect-theme', theme);
        $detect.style.display = 'none';
        document.body.appendChild($detect);

        var style = getComputedStyle($detect, '::before')
        var rendered = (style.content === '"ready"');
        document.body.removeChild($detect);

        if (!rendered) {
          console.log(['not rendered', theme]);
          setTimeout(onRendered, 10);
          return;
        }
      }

      // 3. Swap with the previous CSS when rendered or timed out.
      document.head.removeChild($link);

      // 4. Start to show contents.
      $body.classList.remove('loading');
      $body.addEventListener('transitionend', function onVisible() {
        if (getComputedStyle($footer).opacity !== '1') {
          return;
        }
        $body.removeEventListener('transitionend', onVisible);

        lock = false;

        // 5. Try again if the loaded theme is not the selected one.
        if (theme !== __theme__) {
          loadThemeDynamically(__theme__);
        }
      });
    }, 100);
  });
}

// Traverse themes with 'j' and 'k'.
window.addEventListener('keypress', function(e) {
  var i = __themes__.indexOf(__theme__);
  var theme = __theme__;

  if (e.keyCode === 106) {         // 'j'
    theme = __themes__[(__themes__.length + i + 1) % __themes__.length];
  } else if (e.keyCode === 107) {  // 'k'
    theme = __themes__[(__themes__.length + i - 1) % __themes__.length];
  } else {
    return;
  }

  if (/\?/.exec(location.href)) {
    location.href = location.href.replace(/[\?#].+$/, '') + '#theme=' + theme;
  } else {
    location.hash = '#theme=' + theme;
  }
});
